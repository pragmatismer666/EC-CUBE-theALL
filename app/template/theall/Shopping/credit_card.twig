{% extends 'wide_frame.twig' %}

{% block stylesheet %}
    <link rel="stylesheet" href="{{ asset('assets/css/stripe/credit_payment.css') }}">
    <link rel="stylesheet" href="{{ asset('assets/css/stripe/stripe_4.css') }}">
    <style>
      .stripe_payment_gateway_text{
        font-weight: bold!important;
        margin-bottom: 10px!important;
      }
      .stripe_payment_gateway_existing_box{
        margin-bottom: 40px!important;
        margin-top: 20px!important;
      }
      .stripe_payment_gateway_payment_btn{
        margin-top: 10px!important;
        background: #8c8c8c!important;
        height: auto!important;
        padding: 20px!important;
      }
      .stripe_payment_gateway_payment_btn:hover{
        background: #656565!important;
      }

      .example.example4 input{
        -webkit-appearance: checkbox!important;
        -moz-appearance: checkbox!important;
        appearance: checkbox!important;
        border-style: inherit!important; 
        color: inherit!important;
      }
      
      .btn-delete-card{
        -webkit-appearance: none!important;
        -moz-appearance: none!important;
        appearance: none!important;
      }

      .stripe_payment_gateway_container_inner{
        padding-top: 20px!important;
      }

      @media only screen and (max-width: 750px) {
        .stripe_payment_gateway_container{
          max-width: 100%!important;
          padding: 20px!important;
        }
        .stripe_payment_gateway_container_inner{
          margin: auto!important;
          padding: 60px 20px!important;
        }
      }
    </style>
{% endblock %}
{% block javascript %}
<script src="https://js.stripe.com/v3/"></script>

<script>
'use strict';
var stripe = Stripe("{{ StripeConfig.publishable_key }}");

function registerElements(elements, exampleName, paymentRequest) {
    var formClass = '.' + exampleName;
    var example = document.querySelector(formClass);

    var form = example.querySelector('form');
    var resetButton = example.querySelector('a.reset');
    var error = form.querySelector('.error');
    var errorMessage = error.querySelector('.message');

    function enableInputs() {
        Array.prototype.forEach.call(
        form.querySelectorAll(
            "input[type='text'], input[type='email'], input[type='tel']"
        ),
        function(input) {
            input.removeAttribute('disabled');
        }
        );
    }
    function disableInputs() {
        Array.prototype.forEach.call(
        form.querySelectorAll(
            "input[type='text'], input[type='email'], input[type='tel']"
        ),
        function(input) {
            input.setAttribute('disabled', 'true');
        }
        );
    }

    function triggerBrowserValidation() {
        // The only way to trigger HTML5 form validation UI is to fake a user submit
        // event.
        var submit = document.createElement('input');
        submit.type = 'submit';
        submit.style.display = 'none';
        form.appendChild(submit);
        submit.click();
        submit.remove();
    }
    // Listen for errors from each Element, and show error messages in the UI.
    var savedErrors = {};
    elements.forEach(function(element, idx) {
        element.on('change', function(event) {
            if (event.error) {
                error.classList.add('visible');
                savedErrors[idx] = event.error.message;
                errorMessage.innerText = event.error.message;
            } else {
                savedErrors[idx] = null;

                // Loop over the saved errors and find the first one, if any.
                var nextError = Object.keys(savedErrors)
                    .sort()
                    .reduce(function(maybeFoundError, key) {
                    return maybeFoundError || savedErrors[key];
                    }, null);

                if (nextError) {
                    // Now that they've fixed the current error, show another one.
                    errorMessage.innerText = nextError;
                } else {
                    // The user fixed the last error; no more errors.
                    error.classList.remove('visible');
                }
            }
        });
    });

    var showError = function(message){
        error.classList.add('visible');
        errorMessage.innerText = message;
        enableInputs();
        example.classList.remove('submitting');
        loadingOverlay('hide');
    }

    function stripePaymentHandler(paymentMethodId, isExisting) {
        loadingOverlay("show");
        var is_save_on = false;
        if(isExisting){
            is_save_on = true;
        }else{
            is_save_on = $("input[name='is_save_on']").prop("checked");
        }

        $.ajax({
            type: 'POST',
            data: {
                payment_method_id: paymentMethodId,
                is_save_on: is_save_on
            },
            url: '{{ url("malldevel_credit_payment_intent") }}',
            success: function(data) {
                loadingOverlay("hide")
                if(data.error){
                    showError(data.message)
                }else{
                    stripeResponseHandler(data);
                }
            },
            error: function(error) {
                loadingOverlay('hide');
            }
        });
    }
  
    function stripeResponseHandler(response) {
        switch(response.action) {
            case 'requires_new_card':                
                showError(response.message);
                return;
                break;
            case 'requires_action':                
                stripeCardActionHandler(response.client_secret);
                return;
            case 'requires_capture':                
                stripeReadyHandler(response.payment_intent_id);
                return;
        }

        showError(response.message);
    }
    function stripeCardActionHandler(client_secret) {
        stripe.confirmCardPayment(
            client_secret
        ).then( function(result) {
            if(result.error) {
                getStripeErrorMessage(result.error);
                example.classList.remove('submitting')
                enableInputs();
            } else {
                stripeReadyHandler(result.paymentIntent.id);
            }
        });
    }
    function stripeReadyHandler(paymentIntentId) {
        {# $('input[name=payment_intent_id]').val(paymentIntentId); #}
        $("#{{ form.payment_intent_id.vars.id }}").val(paymentIntentId);
        loadingOverlay("show");
        form.submit();
        example.classList.add('submitted');
    }
    function getStripeErrorMessage(error) {
        var message = '';
        var type = error.type;
        var code = error.code;
        message = error.message;
        
        switch(code) {
            case 'card_declined':
                message = 'カードを請求できませんでした。';
                break;
            case 'payment_intent_authentication_failure':
                message = 'カード認証に失敗しました。ご確認の上再度ご入力ください。';
                break;
        }
        showError(message);
    }

    if (paymentRequest){
        paymentRequest.on('paymentmethod', function(ev){
            stripePaymentHandler(ev.paymentMethod.id, false);
        })
    }

    var pay_button = $(".pay-button")
    // Listen on the form's 'submit' handler...
    // form.addEventListener('submit', function(e) {
    pay_button.on('click', function(e) {
        e.preventDefault();

        // Trigger HTML5 validation UI on the form if any of the inputs fail
        // validation.
        var plainInputsValid = true;
        Array.prototype.forEach.call(form.querySelectorAll('input'), function(input) {
            if (input.checkValidity && !input.checkValidity()) {
                plainInputsValid = false;
                return;
            }
        });

        if (!plainInputsValid) {
            triggerBrowserValidation();
            return;
        }

        // Show a loading screen...
        example.classList.add('submitting');

        // Disable all inputs.
        disableInputs();

        // Gather additional customer data we may have collected in our form.
        var name        = form.querySelector('#' + exampleName + '-name');
        var address1    = form.querySelector('#' + exampleName + '-address');
        var city        = form.querySelector('#' + exampleName + '-city');
        var state       = form.querySelector('#' + exampleName + '-state');
        var zip         = form.querySelector('#' + exampleName + '-zip');

        var additionalData = {
            name: name ? name.value : undefined,
            address_line1: address1 ? address1.value : undefined,
            address_city: city ? city.value : undefined,
            address_state: state ? state.value : undefined,
            address_zip: zip ? zip.value : undefined,
        };

        stripe.createPaymentMethod({
            type: 'card',
            card: elements[0],
        }).then( function (result) {
            if ( result.error ){
                showError(result.error.message)
            }else{
                stripePaymentHandler(result.paymentMethod.id, false);
            }
        })
    });
    {% if payment_method is defined and payment_method != false %}
        $(".pay-existing-method").on('click', function(){
            if($("input[name='is_save_on']").prop("checked") === true){
                stripePaymentHandler("{{ payment_method.id }}", true );
            }else{
                showError("「カード情報を保存する」をチェックしてください")
                return false;
            }
        })
        $(".btn-delete-card").on('click', function(){
            loadingOverlay("show")
            $.ajax({
                type: 'POST',
                data: {
                    payment_method_id: "{{ payment_method.id }}",
                },
                url: '{{ url("malldevel_detach_method") }}',
                success: function(data) {
                    if(data.error){
                        loadingOverlay("hide")
                        showError(data.error)
                    }else{
                        location.reload();
                    }
                },
                error: function(error) {
                    console.log(error);
                    loadingOverlay('hide');
                }
            });
        })
    {% endif %}

    resetButton.addEventListener('click', function(e) {
        e.preventDefault();
        // Resetting the form (instead of setting the value to `''` for each input)
        // helps us clear webkit autofill styles.
        form.reset();

        // Clear each Element.
        elements.forEach(function(element) {
            element.clear();
        });

        // Reset error state as well.
        error.classList.remove('visible');

        // Resetting the form does not un-disable inputs, so we need to do it separately:
        enableInputs();
        example.classList.remove('submitting');
    });
}


$(function() {
    "use strict";

    var elements = stripe.elements({
        fonts: [
            {
            cssSrc: "https://rsms.me/inter/inter-ui.css"
            }
        ],
        // Stripe's examples are localized to specific languages, but if
        // you wish to have Elements automatically detect your user's locale,
        // use `locale: 'auto'` instead.
        locale: window.__exampleLocale
    });

    /**
    * Card Element
    */
    var card = elements.create("card", {
        style: {
            base: {
            color: "#32325D",
            fontWeight: 500,
            fontFamily: "Inter UI, Open Sans, Segoe UI, sans-serif",
            fontSize: "16px",
            fontSmoothing: "antialiased",

            "::placeholder": {
                color: "#CFD7DF"
            }
            },
            invalid: {
            color: "#E25950"
            }
        },
        hidePostalCode: true
    });

    card.mount("#example4-card");

    /**
     * Payment Request Element
     */
    var paymentRequest = stripe.paymentRequest({
        country: "JP",
        currency: 'jpy',
        total: {
            amount: {{ Order.PaymentTotal }},
            label: "支払い"
        }
    })
    var paymentRequestElement = elements.create('paymentRequestButton', { paymentRequest});

    paymentRequest.canMakePayment().then(function(result) {
        if (result) {
            // document.querySelector(".example4 .card-only").style.display = "none";
            document.querySelector(
            ".example4 .payment-request-available"
            ).style.display =  "block";
            paymentRequestElement.mount("#example4-paymentRequest");
        }
    });
    registerElements([card, paymentRequestElement], "example4", paymentRequest);
})
</script>
{% endblock javascript %}

{% block main %}

    <div class="ec-role">
        <div class="ec-pageHeader">
            <h1>{{ '支払い'|trans }}</h1>
        </div>
    </div>

    <div class="ec-cartRole">
        <div class="ec-cartRole__progress">
            <ul class="ec-progress">
                {% set step = 1 %}
                <li class="ec-progress__item">
                    <div class="ec-progress__number">{{ step }}{% set step = step + 1 %}
                    </div>
                    <div class="ec-progress__label">{{ 'カートの商品'|trans }}
                    </div>
                </li>
                {% if is_granted('ROLE_USER') == false %}
                    <li class="ec-progress__item">
                        <div class="ec-progress__number">{{ step }}{% set step = step + 1 %}
                        </div>
                        <div class="ec-progress__label">{{ 'お客様情報'|trans }}
                        </div>
                    </li>
                {% endif %}
                <li class="ec-progress__item">
                    <div class="ec-progress__number">{{ step }}{% set step = step + 1 %}
                    </div>
                    <div class="ec-progress__label">{{ 'ご注文手続き'|trans }}
                    </div>
                </li>
                <li class="ec-progress__item  is-complete">
                    <div class="ec-progress__number">{{ step }}{% set step = step + 1 %}
                    </div>
                    <div class="ec-progress__label">{{ 'ご注文内容確認'|trans }}
                    </div>
                </li>
                <li class="ec-progress__item">
                    <div class="ec-progress__number">{{ step }}{% set step = step + 1 %}
                    </div>
                    <div class="ec-progress__label">{{ '完了'|trans }}
                    </div>
                </li>
            </ul>
        </div>

    </div>
    <main>
      <section class="container-lg stripe_payment_gateway_container">
        <div class="cell example example4 stripe_payment_gateway_container_inner" id="example-4">
          <form action="{{ url('shopping_checkout') }}" method="POST">
            {{ form_widget(form._token) }}
            {# <input type="hidden" name="payment_intent_id"> #}
            {{ form_widget(form.payment_intent_id, { type: 'hidden'}) }}
            <div id="example4-paymentRequest">
              <!--Stripe paymentRequestButton Element inserted here-->
            </div>
            {% if nonmem == false and payment_method is defined and payment_method != false and is_granted('ROLE_USER') %}
            <div class="stripe_payment_gateway_existing_box">
              <p class="stripe_payment_gateway_text">保存済みカード</p>
              <div style="border: 1px solid #ccc; padding: 15px; display: flex; justify-content: space-between;">
                <div style="color: #555;">
                  <svg id="Capa_1" enable-background="new 0 0 511.979 511.979" height="30" viewBox="0 0 511.979 511.979" width="30" xmlns="http://www.w3.org/2000/svg"><g><path d="m498.819 166.33-153.171-153.171c-17.546-17.546-46.096-17.544-63.64 0l-192.201 192.202h-44.807c-24.813 0-45 20.187-45 45v216.617c0 24.813 20.187 45 45 45h344.62c24.813 0 45-20.187 45-45v-172.81l64.199-64.199c17.546-17.545 17.546-46.093 0-63.639zm-195.597-131.958c2.925-2.924 6.766-4.387 10.607-4.387s7.682 1.463 10.606 4.387l78.925 78.925-92.064 92.064h-179.064zm101.398 432.606c0 8.271-6.729 15-15 15h-344.62c-8.271 0-15-6.729-15-15v-216.617c0-8.271 6.729-15 15-15h344.62c8.271 0 15 6.729 15 15zm-8.896-261.192c-1.998-.272-4.033-.425-6.104-.425h-35.898l70.851-70.852 21.214 21.214zm81.882 2.971-42.986 42.986v-1.382c0-11.402-4.271-21.821-11.286-29.759l43.666-43.666 10.606 10.606c5.849 5.849 5.849 15.366 0 21.215z"/><path d="m60 406.574h55.819v30h-55.819z"/><path d="m146.267 406.574h55.819v30h-55.819z"/><path d="m232.534 406.574h55.82v30h-55.82z"/><path d="m318.801 406.574h55.819v30h-55.819z"/><path d="m161.267 280.766h-101.267v90h101.267zm-30 60h-41.267v-30h41.267z"/></g></svg>
                  <div style="display: inline-block; margin-left: 10px;">
                    <div>
                      末尾 {{ payment_method.card.last4 }}
                    </div>
                    <div>
                      {{ exp }}
                    </div>
                  </div>
                </div>
                <a class="btn-delete-card" type="button" style="cursor: pointer;">
                  <svg style="margin-top: 15px;" height="10pt" viewBox="0 0 365.696 365.696" width="10pt" xmlns="http://www.w3.org/2000/svg"><path d="m243.1875 182.859375 113.132812-113.132813c12.5-12.5 12.5-32.765624 0-45.246093l-15.082031-15.082031c-12.503906-12.503907-32.769531-12.503907-45.25 0l-113.128906 113.128906-113.132813-113.152344c-12.5-12.5-32.765624-12.5-45.246093 0l-15.105469 15.082031c-12.5 12.503907-12.5 32.769531 0 45.25l113.152344 113.152344-113.128906 113.128906c-12.503907 12.503907-12.503907 32.769531 0 45.25l15.082031 15.082031c12.5 12.5 32.765625 12.5 45.246093 0l113.132813-113.132812 113.128906 113.132812c12.503907 12.5 32.769531 12.5 45.25 0l15.082031-15.082031c12.5-12.503906 12.5-32.769531 0-45.25zm0 0"/></svg>
                </a>
              </div>
              <button class="pay-existing-method stripe_payment_gateway_payment_btn" type="button" style="margin-bottom: 10px;">保存済みのカードで支払う</button>
            </div>
              <style>
                .existing-card-wrapper{
                  border: 1px solid #ccc;
                  padding: 15px;
                  display: flex;
                  border-radius: 5px;
                }
              </style>
            {% endif %}
            
            <div>
              <p class="stripe_payment_gateway_text">新しいカード</p>
              <legend class="payment-request-available" data-tid="elements_examples.form.enter_card_manually">カードでお支払い</legend>
              <div class="container">
                <div id="example4-card"></div>
                <button type="submit" class="pay-button stripe_payment_gateway_payment_btn" data-tid="elements_examples.form.donate_button">新しいカードで支払う {{ Order.PaymentTotal|price }}</button>
              </div>
              <div class="stripe-save-card-checkbox-wrapper">
                {% if nonmem == false %}
                <input type="checkbox" name="is_save_on" class="stripe-save-card-checkbox"
                {% if payment_method is defined and payment_method != false and is_granted('ROLE_USER') %}
                checked
                {% endif %}
                >{{ 'malldevel.stripe.credit.save_card'|trans }}
                {% endif %}
              </div>
            </div>
            <div class="error" role="alert">
              <svg xmlns="http://www.w3.org/2000/svg" width="17" height="17" viewBox="0 0 17 17">
                <path class="base" fill="#000" d="M8.5,17 C3.80557963,17 0,13.1944204 0,8.5 C0,3.80557963 3.80557963,0 8.5,0 C13.1944204,0 17,3.80557963 17,8.5 C17,13.1944204 13.1944204,17 8.5,17 Z"></path>
                <path class="glyph" fill="#FFF" d="M8.5,7.29791847 L6.12604076,4.92395924 C5.79409512,4.59201359 5.25590488,4.59201359 4.92395924,4.92395924 C4.59201359,5.25590488 4.59201359,5.79409512 4.92395924,6.12604076 L7.29791847,8.5 L4.92395924,10.8739592 C4.59201359,11.2059049 4.59201359,11.7440951 4.92395924,12.0760408 C5.25590488,12.4079864 5.79409512,12.4079864 6.12604076,12.0760408 L8.5,9.70208153 L10.8739592,12.0760408 C11.2059049,12.4079864 11.7440951,12.4079864 12.0760408,12.0760408 C12.4079864,11.7440951 12.4079864,11.2059049 12.0760408,10.8739592 L9.70208153,8.5 L12.0760408,6.12604076 C12.4079864,5.79409512 12.4079864,5.25590488 12.0760408,4.92395924 C11.7440951,4.59201359 11.2059049,4.59201359 10.8739592,4.92395924 L8.5,7.29791847 L8.5,7.29791847 Z"></path>
              </svg>
              <span class="message"></span>
            </div>
          </form>
          <div class="success">
            <div class="icon">
              <svg width="84px" height="84px" viewBox="0 0 84 84" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                <circle class="border" cx="42" cy="42" r="40" stroke-linecap="round" stroke-width="4" stroke="#000" fill="none"></circle>
                <path class="checkmark" stroke-linecap="round" stroke-linejoin="round" d="M23.375 42.5488281 36.8840688 56.0578969 64.891932 28.0500338" stroke-width="4" stroke="#000" fill="none"></path>
              </svg>
            </div>
            <h3 class="title" data-tid="elements_examples.success.title">支払い成功</h3>
            <p class="message"><span data-tid="elements_examples.success.message">ご注文いただきありがとうございます。</span></p>
            <a class="reset" href="#">
              <svg width="32px" height="32px" viewBox="0 0 32 32" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                <path fill="#000000" d="M15,7.05492878 C10.5000495,7.55237307 7,11.3674463 7,16 C7,20.9705627 11.0294373,25 16,25 C20.9705627,25 25,20.9705627 25,16 C25,15.3627484 24.4834055,14.8461538 23.8461538,14.8461538 C23.2089022,14.8461538 22.6923077,15.3627484 22.6923077,16 C22.6923077,19.6960595 19.6960595,22.6923077 16,22.6923077 C12.3039405,22.6923077 9.30769231,19.6960595 9.30769231,16 C9.30769231,12.3039405 12.3039405,9.30769231 16,9.30769231 L16,12.0841673 C16,12.1800431 16.0275652,12.2738974 16.0794108,12.354546 C16.2287368,12.5868311 16.5380938,12.6540826 16.7703788,12.5047565 L22.3457501,8.92058924 L22.3457501,8.92058924 C22.4060014,8.88185624 22.4572275,8.83063012 22.4959605,8.7703788 C22.6452866,8.53809377 22.5780351,8.22873685 22.3457501,8.07941076 L22.3457501,8.07941076 L16.7703788,4.49524351 C16.6897301,4.44339794 16.5958758,4.41583275 16.5,4.41583275 C16.2238576,4.41583275 16,4.63969037 16,4.91583275 L16,7 L15,7 L15,7.05492878 Z M16,32 C7.163444,32 0,24.836556 0,16 C0,7.163444 7.163444,0 16,0 C24.836556,0 32,7.163444 32,16 C32,24.836556 24.836556,32 16,32 Z"></path>
              </svg>
            </a>
          </div>
        </div>
      </section>
    </main>   
{% endblock %}